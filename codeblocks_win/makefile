#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#
# Optimized manually!
# cbp2make.exe -in dnsforwarder.cbp -out mk -windows -targets Release,Debug --flat-objects --wrap-objects --with-deps

### MSYS convert `/c` to `C:/`
ifneq "$(MSYSTEM)" ""
	CMD_OPT = //C
else
	CMD_OPT = /C
endif

# Builtin variables' default value: https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html
ifeq "$(CC)" "cc"
	CC = gcc.exe
endif
ifeq "$(LD)" "ld"
	LD = g++.exe
endif

WINDRES ?= windres.exe

INC = 
CFLAGS ?= -Wall -DWIN32_LEAN_AND_MEAN
RESINC = 
LIBDIR = 
LIB = -lws2_32 -lwininet -lshlwapi -luser32
LDFLAGS ?= -static-libgcc

INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -g
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
OBJDIR_DEBUG = .\\obj\\Debug$(ARCH_EXT)
BINDIR_DEBUG = .\\bin\\Debug$(ARCH_EXT)
OUT_DEBUG = $(BINDIR_DEBUG)\\dnsforwarder.exe

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O3 -Os
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS) -s
OBJDIR_RELEASE = .\\obj\\Release$(ARCH_EXT)
BINDIR_RELEASE = .\\bin\\Release$(ARCH_EXT)
OUT_RELEASE = $(BINDIR_RELEASE)\\dnsforwarder.exe

SOURCES_APP = main.c

SOURCES_LIB = \
	addresslist.c \
	addresslist.h \
	array.c \
	array.h \
	bst.c \
	bst.h \
	cacheht.c \
	cacheht.h \
	cachettlcrtl.c \
	cachettlcrtl.h \
	common.h \
	dnscache.c \
	dnscache.h \
	dnsgenerator.c \
	dnsgenerator.h \
	dnsparser.c \
	dnsparser.h \
	dnsrelated.c \
	dnsrelated.h \
	domainstatistic.c \
	domainstatistic.h \
	downloader.c \
	downloader.h \
	dynamichosts.c \
	dynamichosts.h \
	filter.c \
	filter.h \
	goodiplist.c \
	goodiplist.h \
	hosts.c \
	hosts.h \
	hostscontainer.c \
	hostscontainer.h \
	hostsutils.c \
	hostsutils.h \
	iheader.c \
	iheader.h \
	ipchunk.c \
	ipchunk.h \
	ipmisc.c \
	ipmisc.h \
	linkedqueue.c \
	linkedqueue.h \
	logs.c \
	logs.h \
	mcontext.c \
	mcontext.h \
	mmgr.c \
	mmgr.h \
	oo.h \
	pipes.c \
	pipes.h \
	ptimer.c \
	ptimer.h \
	readconfig.c \
	readconfig.h \
	readline.c \
	readline.h \
	rwlock.h \
	simpleht.c \
	simpleht.h \
	socketpool.c \
	socketpool.h \
	socketpuller.c \
	socketpuller.h \
	stablebuffer.c \
	stablebuffer.h \
	statichosts.c \
	statichosts.h \
	stringchunk.c \
	stringchunk.h \
	stringlist.c \
	stringlist.h \
	tcpfrontend.c \
	tcpfrontend.h \
	tcpm.c \
	tcpm.h \
	timedtask.c \
	timedtask.h \
	udpfrontend.c \
	udpfrontend.h \
	udpm.c \
	udpm.h \
	utils.c \
	utils.h \
	winmsgque.c \
	winmsgque.h

OBJECTS_APP = $(patsubst %.c,%.o,$(filter %.c,$(SOURCES_APP)))
OBJECTS_LIB = $(patsubst %.c,%.o,$(filter %.c,$(SOURCES_LIB)))

OBJ_APP_DEBUG = $(patsubst %.o,$(OBJDIR_DEBUG)\\%.o,$(OBJECTS_APP))
OBJ_LIB_DEBUG = $(patsubst %.o,$(OBJDIR_DEBUG)\\%.o,$(OBJECTS_LIB))

OBJ_APP_RELEASE = $(patsubst %.o,$(OBJDIR_RELEASE)\\%.o,$(OBJECTS_APP))
OBJ_LIB_RELEASE = $(patsubst %.o,$(OBJDIR_RELEASE)\\%.o,$(OBJECTS_LIB))

### test
OUT_TEST = $(patsubst ../test/%/main.c,test\\%\\main.exe,$(wildcard ../test/*/main.c)) # requires `/`
BINDIR_TEST = $(patsubst test\\%\\main.exe,$(BINDIR_DEBUG)\\test\\%\\,$(OUT_TEST))
OBJDIR_TEST = $(patsubst test\\%\\main.exe,$(OBJDIR_DEBUG)\\test\\%\\,$(OUT_TEST))
LIB_A_DEBUG = $(filter-out .\\obj\\Debug\main.o,$(OBJ_LIB_DEBUG))

###
.PHONY: before_debug clean_debug before_release clean_release

###
release: before_release $(OUT_RELEASE)

before_release: 
	cmd.exe $(CMD_OPT) "if not exist $(BINDIR_RELEASE) md $(BINDIR_RELEASE)"
	cmd.exe $(CMD_OPT) "if not exist $(OBJDIR_RELEASE) md $(OBJDIR_RELEASE)"

$(OUT_RELEASE): $(OBJ_APP_RELEASE) $(OBJ_LIB_RELEASE)
	$(LD) $(LIBDIR_RELEASE) -o $(OUT_RELEASE) $^ $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJ_APP_RELEASE): $(OBJ_LIB_RELEASE)

$(OBJDIR_RELEASE)\\%.o: ..\\%.c
	$(CC) $(CFLAGS_RELEASE) $(INC_RELEASE) -c $< -o $@

clean_release: 
	cmd.exe $(CMD_OPT) "if exist $(OUT_RELEASE) del /f $(OUT_RELEASE)"
	cmd.exe $(CMD_OPT) "if exist $(OBJDIR_RELEASE) rd /s /q $(OBJDIR_RELEASE)"

###
debug: before_debug $(OUT_DEBUG)

before_debug: 
	cmd.exe $(CMD_OPT) "if not exist $(BINDIR_DEBUG) md $(BINDIR_DEBUG)"
	cmd.exe $(CMD_OPT) "if not exist $(OBJDIR_DEBUG) md $(OBJDIR_DEBUG)"

$(OUT_DEBUG): $(OBJ_APP_DEBUG) $(OBJ_LIB_DEBUG)
	$(LD) $(LIBDIR_DEBUG) -o $(OUT_DEBUG) $^ $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJ_APP_DEBUG): $(OBJ_LIB_DEBUG)

$(OBJDIR_DEBUG)\\%.o: ..\\%.c
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $< -o $@

clean_debug: 
	cmd.exe $(CMD_OPT) "if exist $(OUT_DEBUG) del /f $(OUT_DEBUG)"
	cmd.exe $(CMD_OPT) "if exist $(OBJDIR_DEBUG) rd /s /q $(OBJDIR_DEBUG)"

###
test: before_debug $(OUT_TEST)

test\\%\\main.exe: $(OBJDIR_DEBUG)\\test\\%\\main.o $(LIB_A_DEBUG) $(OBJDIR_DEBUG)\\test\\testutils.o
	cmd.exe $(CMD_OPT) "if not exist $(BINDIR_DEBUG)\\$(@D) md $(BINDIR_DEBUG)\\$(@D)"
	$(LD) $(LIBDIR_DEBUG) -o $(BINDIR_DEBUG)\\$@ $^ $(LDFLAGS_DEBUG) $(LIB_DEBUG)
	$(BINDIR_DEBUG)\\$@

$(OBJDIR_DEBUG)\\test\\%.o: ..\\test\\%.c
	cmd.exe $(CMD_OPT) "if not exist $(@D) md $(@D)"
	$(CC) $(CFLAGS_DEBUG) $(INC_DEBUG) -c $< -o $@

###
all: debug release

clean: clean_debug clean_release

