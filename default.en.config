# Configuration File for dnsforwarder
# This file should be encoded in ANSI
# Comments start with `#'
# Sorry for my poor English

# Writing of Relative Paths:
# Windows:
#  `% %' styled relative path, for example `%SYSTEMROOT%\System32\drivers\etc\hosts'.
#  In particular,
#  `%PROGRAMDIRECTORY%' represents the folder in which the executable file is.
#  `%CONFIGFILEDIRECTORY%' represents the folder in which the configuration file is. (since 6.1.3)
#
# Linux:
#  `${HOME}' styled relative path, for example `${HOME}/hosts'.
#  In particular,
#  `${PROGRAMDIRECTORY}' represents the configuration folder, generally it is `/root/.dnsforwarder/'
#      but may vary in some other situations.
#      You can execute `dnsforwarder -p' to obtain the correct location.
#  `${CONFIGFILEDIRECTORY}' represents the folder in which the configuration file is. (since 6.1.3)

##################################################
#
# Log File
#
##################################################

# LogOn <BOOLEAN>
# Log to file (since 5.0.4)
# `true' or `false'
LogOn false

# LogFileThresholdLength <NUM>
# The threshold length of a single log file (in bytes) (since 5.0.4)
# Once the length of current file exceeds the threshold, logs are rotated
LogFileThresholdLength 102400

# LogFileFolder <PATH>
# Where to save log files (since 5.0.4)
# By default, the location is the folder in which the executable file is (Windows),
#     or the configuration folder (Linux)
LogFileFolder

##################################################
#
# Local Interface
#
##################################################

# UDPLocal <IP[:PORT]>,<IP[:PORT]>,...
# Local UDP interfaces being bound (IP[:PORT]-tuples, comma-separated),
#     which could contain loopback addresses (127.0.0.1), LAN addresses and internet addresses (since 6.0.0)
# An IPv6 address should be square-bracket-rounded, e.g. [::1]:53 and [fe80::699c:f79a:9bb6:1]:5353
# `[:PORT]' can be ommited, in which case the port number 53 is to be used
#
# Example:
# UDPLocal 127.0.0.1:53,[::1]:53
UDPLocal 127.0.0.1:53

# TCPLocal <IP[:PORT]>,<IP[:PORT]>,...
# TCP service is the fallback of UDP, and it should keep the same as UDPLocal. (since 6.5.0)
# If ommited, TCP service is not enabled.
# TCPLocal 127.0.0.1:53,[::1]:53

##################################################
#
# Response Selection
#
##################################################

#########################
# Server Groups
#########################
# For parallel query:
#   Either one family of upstream servers is adopted for each round.
#   If dual-stack is desired, IPv4-mapped IPv6 addresses are required.
#   Windows: Vista or later.

# UDPGroup <IP1[:PORT],IP2[:PORT],...> <DOMAIN1,DOMAIN2,...> <on|off>
# Set a group of upstream servers with which UDP protocol is used,
#     and specify domains so that queries to these domains are forwarded to these servers (since 6.0.0)
# The first part `<IP1[:PORT],IP2[:PORT],...>' is comma-separated IP[:PORT]-tuples
#     which specifies the servers in the group.
#     The port number 53 is to be used if `[:PORT]' is ommited
# The second part `<DOMAIN1,DOMAIN2,...>' specifies domains
#     that queries to these domains are forwarded to these servers in the group.
#     Wildcards(`?',`*') are supported
# The third part `<on|off>' sets whether to use parallel query, either `on' or `off'
# When parallel query is on, every query pertaining to this group is forwarded to
#     all the servers in this group. For each query, The fastest non-blocked response would be selected
#     and forwarded back to the client, whether the rest responses are discarded or cached is decided by `CacheParallel`
# Multiple `UDPGroup' statements are allowed
UDPGroup 1.2.4.8:53,114.114.114.114 * on

# EnableUDPtoTCP <BOOLEAN>
# Allow UDP queries to be forwarded to TCP upstream servers. (since 6.5.0)
# In principle:
#   UDP responses have 512 bytes upper limit (we omitted it), while TCP don't;
#   TCP service is a fallback for sending responses exceed the limit;
#   TCP protocol is reliable but consumes longer time.
# It would be better to isolate one from another, if TCP is interfered or unstable.
# `true' or `false' (default).
EnableUDPtoTCP

# EnableUDPtoTCP <BOOLEAN>
# Allow UDP queries to be forwarded to TCP upstream servers. (since 6.5.0)
# The same logic as above. If enabled, the fallback could fail.
EnableTCPtoUDP

# TCPGroup <IP1[:PORT],IP2[:PORT],...> <DOMAIN1,DOMAIN2,...> <on|off> <no|PROXY1[:PORT],PROXY2[:PORT],...>
# Set a group of upstream servers with which TCP protocol is used,
#     and specify domains so that queries to these domains are forwarded to these servers (since 6.0.0)
# The first part `<IP1[:PORT],IP2[:PORT],...>' is comma-separated IP[:PORT]-tuples
#     which specifies the servers in the group.
#     The port number 53 is to be used if `[:PORT]' is ommited
# The second part `<DOMAIN1,DOMAIN2,...>' specifies domains
#     that queries to these domains are forwarded to these servers in the group.
#     Wildcards(`?',`*') are supported
# The third part `<on|off>' sets whether to use parallel query, either `on' or `off'. (since 6.5.0)
# The fourth part `<no|PROXY1[:PORT],PROXY2[:PORT],...>' sets whether to use Socks5 proxy to communicate with servers.
#     `no' means do not use any proxy. Otherwise comma-separated PROXY[:PORT]-tuples indicate the proxies to be used,
#     the port number 1080 is to be used if `[:PORT]' is ommited
# Multiple `TCPGroup' statements are allowed
#
# Example 1:
#  TCPGroup 1.2.4.8:53,114.114.114.114 *.example.com off 192.168.50.5:8080,192.168.50.6:8080
# Queries to `*.example.com' are forwarded to 1.2.4.8:53 or 114.114.114.114 over TCP
#     through Socks5 proxies 192.168.50.5:8080 or 192.168.50.6:8080
# Example 2:
#  TCPGroup 8.8.8.8,114.114.114.114:53 * on no
# Queries to `*.example.com' are forwarded to 8.8.8.8 and 114.114.114.114:53 over TCP
#     directly(thought no proxy)
TCPGroup

# TCPKeepAlive <NUM>
# Keep-alive seconds for idle TCP connection to upstream servers, default: 5 (since since 6.5.1)
# Connection reuse will save connection establishing time, but to some servers (proxies),
# it will become writable but unreadable if it exceeds a certain period.
# To servers which close the connections, it is ineffective.
TCPKeepAlive

# GroupFile <PATH>
# If you think writing `UDPGroup' or `TCPGroup' is tedious,
#     you can write the corresponding rules in a file and import here with this option (since 6.1.3)
# Multiple `GroupFile' statements are allowed
# The last rule matches first
#
# Example 1:
#  GroupFile D:\group.txt
#
# Example 2:
#  GroupFile /etc/group.txt
GroupFile

# GroupFile syntax:
# # file 1
# ; comment too
# # UDP
# PROTOCOL UDP
# SERVER 1.2.4.8,127.0.0.1
# PARALLEL ON
#
# LIST domainlist.txt
#
# example.com # comment
#
# # file 2
# # TCP
# PROTOCOL TCP
# SERVER 1.2.4.8,127.0.0.1
# PARALLEL ON
# PROXY NO
#
# LIST domainlist.txt
#
# example.com
#
# # file 3
# # TCP
# PROTOCOL TCP
# SERVER 1.2.4.8,127.0.0.1
# PARALLEL OFF
# PROXY 192.168.1.1:8080,192.168.1.1:8081
#
# example.com

# Notes:
# 1.For domains that aren't explicitly specified, a random server group will be chosen.
# 2.For domains specified to more than one server groups, the order of seletion is as follows:
#   (1) The matched item without any wildcards.
#       If there are more than one, choose the most matchable one
#       (e.g. `ipv6.microsoft.com' is more matchable than `microsoft.com'
#       when matching with `teredo.ipv6.microsoft.com').
#       If there are more than one most matchable items, choose the last one.
#   (2) The matched item with wildcards.
#       If there are more than one, a random one is chosen.
#
# Other Examples:
# 1. Forward quieries to domains tailed with microsoft.com or office.com to 1.2.4.8 over UDP,
#    and quieries to any other domain to 8.8.4.4 over TCP:
#  UDPGroup 1.2.4.8 microsoft.com,office.com on
#  TCPGroup 8.8.4.4 * no
# The order of these two lines should be maintained


#########################
# Response Selections
#########################

# BlockIP <IP1>,<IP2>,.....
# Ignore DNS responses from servers with these IPs (since 6.0.0)
# An IPv6 address should NOT be square-bracket-rounded
BlockIP

# IPSubstituting <IP1 IP'1>,<IP2 IP'2>,.....
# Replace an IP with another in every response from servers
# The IPs to be replaced support CIDR form, but the desired IP does NOT, and MUST keep the same version
# e.g.
#  IPSubstituting 127.0.0.1 1.2.0.127
# Which is, replacing 127.0.0.1 with 1.2.0.127 in every response from servers (since 5.0.1)
#  IPSubstituting 173.245.48.0/20 173.245.48.22
# will replace all IPs in 173.245.48.0/20 with 173.245.48.22 in every response from servers (since 6.5.0)
# This option only affects responses from servers, but not responses from hosts and cache
# Adjacent items should be separated by a comma, or split them to different lines of `IPSubstituting'
# IP rules are tested first, and then CIDR rules.
IPSubstituting

# IPSubstituting <PATH>
# IPSubstituting rules line by line in files.
# Multiple statements are allowed.
IPSubstitutingFile

# BlockNegativeResponse <BOOLEAN>
# Ignore negative responses from upstream servers (since 6.1.1)
# Negative responses are, for example:
# Format Error
# Server Failure
# Non-Existent Domain
# Query Refused
# etc.
# Refer RFC 6895, section `2.3.  RCODE Assignment' for more details
# `true' or `false'
BlockNegativeResponse false

#########################
# IP List (only IPv4 supported)
#########################
# Checking lists of IP addresses periodically, and picking up the fastest one for each list

# GoodIPList <NAME> <INTERVAL>
# Define an IP list, where <NAME> is the name which can be referred in host items and
#     <INTERVAL> is the interval between successive checkings(of availability of IPs in the list), in milliseconds
# Example:
#  GoodIPList list1 60000

# GoodIPListAddIP <LIST_NAME> <IP:PORT>
# Add an IP to an IP list
# Port numbers MUST be assigned
# Example:
#  GoodIPListAddIP list1 120.0.0.1:80

#########################
# Hosts
#########################
# Host IPs:
# If multiple IPs are provide, the LIFO item is return.
# If the item with same version is found, it is return.
# If only IPv4 is provide but IPv6 is queried, IPv4-mapped IPv6 address is return,
# like DNS64 with ::ffff::/96. It saves memory for ads blocking.
#
# IPv4-mapped IPv6 address:
# Windows creates IPv6-only socket by default, even the network interface is IPv4/IPv6 dual-stack.
# So, whether programs support it depend on whether they have switched to dual-stack socket. And don'ts are more.
# Chrome and golang compiled programs support it, while Firefox and Rust compiled programs don't, by default.
# For non-blocked hosts with specified IPv4, you'd better provide the IPv6, or use a compatible proxy for them.

# Hosts <STRING>
# Load hosts from files(local or remote) (since 5.0.5)
# The path to a local file should begin with `file://',
#     and the path to a remote file should begin with `http://' or `https://'
# You can specify multiple hosts files with multiple `Hosts' statements
# Do not surround a path with quotation marks
# Wildcards(`?',`*') are supported
# Hosts files should be in its raw format, but not archive and html
# Hosts files had better be in ANSI
# An IPv6 address in hosts files should not be square-bracket-rounded
#
# Examples:
#  Hosts file://C:/Windows/System32/drivers/etc/hosts
#  Hosts file:///etc/hosts
#  Hosts http://xxx.com/hosts
Hosts

# HostsRetryInterval <NUM>
# The number of seconds waiting before retrying when failed to download hosts (since 2.2.2)
# The default is 30 if leaved empty
HostsRetryInterval 30

# HostsDownloadPath <PATH>
# The path to local hosts cache file (not to a folder) (since 2.2)
# The file may be overwritten without any prompting
# By default, the file is in the folder in which the executable file is (Windows),
#     or the configuration folder (Linux), named `hosts.txt'
#
# Examples:
#  HostsDownloadPath D:\Temp\hosts.txt
#  HostsDownloadPath /var/cache/hosts.txt
HostsDownloadPath

# HostsScript <PATH>
# The script running after caching all the hosts and before loading hosts (since 2.2)
HostsScript

# AppendHosts <HOSTS>,<HOSTS>,...
# Manually add a host item (since 2.2.2)
# The writing of a host here is the same as that of in hosts files
# You can specify multiple host items either by separating them by commas
#     or use multiple `AppendHosts' statements
# For example:
#  AppendHosts 127.0.0.1 123.com,127.0.0.1 456.com,1.2.3.4 foobar.*
# Which is equivalent to the following:
#  AppendHosts 127.0.0.1 123.com
#  AppendHosts 127.0.0.1 456.com
#  AppendHosts 1.2.3.4 foobar.*
#
# Unconventional types of hosts:
# Type 1: Hosts point to IP lists
#  AppendHosts <list1> www.123.com
# Where `list1' is the name of an IP list defined by a `GoodIPList' option
# This makes the IP address of www.123.com be the fastest one in `list1'
#
# Type 2: CName redirections
#  AppendHosts www.google.cn *.google.com
# This makes the IP addresses of *.google.com be the same as these of www.google.cn
#
# Type 3: Skipping queryings from hosts
#  AppendHosts @@ *.012345.com
# Then any query to *.012345.com won't be queried from hosts
#     (as if there is no host item of *.012345.com)
#
# Priorities of different types of hosts(from higher to lower):
#  1. Type 3 unconventional hosts
#  2. Conventional hosts and type 1 unconventional hosts
#  3. Type 2 unconventional hosts
AppendHosts

# BlockIpv6WhenIpv4Exists <BOOLEAN>
# Refuse to query to IPv6 addresses of domains that have IPv4 host items (since 5.0.12, renamed after 6.0.0)
# `true' or `false'
BlockIpv6WhenIpv4Exists false

##################################################
#
# Modules Reloading
#
##################################################

# ModulesUpdateInterval <NUM>
# The period between two reloadings of hosts, DisabledList and GroupFile files, in seconds (since 2.2)
# Set to -1 if you don't want to reload
# The default is 18000 if leaved empty
ModulesUpdateInterval 18000

# ReloadDisabledList <BOOLEAN>
# After hosts downloading succeeded and HostsScript executed
# `true' or `false'
ReloadDisabledList true

# ReloadGroupFile <BOOLEAN>
# After hosts downloading succeeded and HostsScript executed
# `true' or `false'
ReloadGroupFile true

# ReloadIPSubstituting <BOOLEAN>
# After hosts downloading succeeded and HostsScript executed
# `true' or `false'
ReloadIPSubstituting true

##################################################
#
# DNS Cache
#
##################################################

# UseCache <BOOLEAN>
# Turn on DNS cache (since 2.2)
# `true' or `false'
UseCache false

# CacheParallel <BOOLEAN>
# Cache all new validated answers of parallel queries，default: false
# TTL are updated to the smallest
# Together with OverrideTTL, it could get more stable result
CacheParallel true

# CacheSize <NUM>
# Cache size (in bytes)
# Not less than 102400 (100KB) (since 2.3)
CacheSize 1048576

# MemoryCache <BOOLEAN>
# Use memory cache instead of file cache (since 2.3.2)
# `true' or `false'
MemoryCache true

# CacheFile <PATH>
# When using file cache(`MemoryCache' is `false'), the path to this file (since 2.3)
# By default, the file is located in the folder in which the executable file is (Windows),
#     or the configuration folder (Linux)
CacheFile

# IgnoreTTL <BOOLEAN>
# Ignore cache items' TTL (since 2.2)
# When set to `true', all the cache items won't be swept,
#     otherwise, every cache item will be swept after it exceeds its TTL
# `true' or `false'
IgnoreTTL false

# OverrideTTL <NUM>
# Override all cache items' TTL to specified number(usually in seconds)
# Set to `-1' to disable overriding
# This option is equivalent to `CacheControl * fixed <NUM>' (since 5.0.18)
OverrideTTL 600

# MultipleTTL <NUM>
# Multiply every TTL by <NUM> (since 2.2)
# This option is equivalent to `CacheControl * vari <NUM>x+0' (since 5.0.18)
MultipleTTL 1

# CacheControl <DOMAIN> [$[$]]<TYPE> [ARGUMENT]
# Advanced cache controls (since 5.0.18)
# This option only takes effect when cache is turned on
# Where,
#  <DOMAIN> a domain specifier(wildcards(`?',`*') supported);
#  [$[$]] sets the contagiousness;
#  <TYPE> is the type(see below);
#  [ARGUMENT] is an argument(see below)
#
# <TYPE> could be one of the followings(all lowercase):
#     orig    : Do not change TTLs, no [ARGUMENT] needed
#     nocache : Do not cache corresponding items, no [ARGUMENT] needed
#     fixed   : Set TTLs to a fixed number of [ARGUMENT]
#     vari    : Set TTLs to a number computed with [ARGUMENT],
#               In this case, [ARGUMENT] should be in the form of `ax+b' where 
#               `a' and `b' are user-specified non-negative numbers,
#               `x' is its original TTL(just leave it `x')
#
# Examples:
#  CacheControl baidu.com orig # Do not change TTLs of domains tailed with `baidu.com'
#  CacheControl 163.com nocache # Do not cache domains tailed with `163.com'
#  CacheControl qq.com fixed 500 # Change every TTL of domains tailed with `qq.com' to 500
#  CacheControl sina.com.cn vari 2x+200 # Change every TTL of domains tailed with `sina.com.cn' 
#      to 2*x+200, where `x' is its original TTL
#
# Contagiousness:
# Problem arised for domains that have CName records, such as www.windowsupdate.com:
#  ;; QUESTION SECTION:
#  ;www.windowsupdate.com.      IN  A
#
#  ;; ANSWER SECTION:
#  www.windowsupdate.com.   3585    IN  CNAME   windowsupdate.microsoft.nsatc.net.       (Record 1)
#  windowsupdate.microsoft.nsatc.net. 285 IN CNAME  www.update.microsoft.com.nsatc.net.  (Record 2)
#  www.update.microsoft.com.nsatc.net. 285  IN A    134.170.58.222                       (Record 3)
#  www.update.microsoft.com.nsatc.net. 285  IN A    65.55.50.157                         (Record 4)
#
# Consider if there is a control rule for `www.windowsupdate.com',
#     how to handle with `windowsupdate.microsoft.nsatc.net' and
#     `www.update.microsoft.com.nsatc.net'? To inheret from `www.windowsupdate.com'
#     or use its own rules(if any)?
# To solve this problem I introduced contagiousness. There are three contagion mechanism,
#     exampled with `www.windowsupdate.com':
#  Actively  : Whether or not there is any independent rule, 
#              the rule for `www.windowsupdate.com' will always be used.
#              This is the default
#  Passively : First use the independent rule. If none, 
#              use the rule for `www.windowsupdate.com'
#  No        : If there is a independent rule, use it. Otherwise, leave its TTL as is
#
# Examples:
#  Actively:
#   CacheControl www.windowsupdate.com fixed 1000
#   CacheControl 163.com orig
#  Passively (one `$' before <TYPE>):
#   CacheControl www.windowsupdate.com $fixed 1500
#   CacheControl sina.com.cn $nocache
#  No contagion (two `$' before <TYPE>):
#   CacheControl www.windowsupdate.com $$fixed 2000
#   CacheControl windowsupdate.microsoft.nsatc.net $$vari 2x+100
#
# More Examples (Again exampled with `www.windowsupdate.com'):
#   CacheControl www.windowsupdate.com fixed 1000
#   CacheControl windowsupdate.microsoft.nsatc.net fixed 500
#  The net effect is, the TTLs of record 1, 2, 3 and 4 will be changed to 1000
#
#   CacheControl www.windowsupdate.com $fixed 1000
#   CacheControl windowsupdate.microsoft.nsatc.net fixed 500
#  The net effect is, the TTLs of record 1, 3 and 4 will be changed to 1000,
#      that of record 2 will be changed to 500
#
#   CacheControl www.windowsupdate.com $$fixed 1000
#   CacheControl windowsupdate.microsoft.nsatc.net fixed 500
#  The net effect is, the TTL of record 1 will be changed to 1000,
#      that of record 2 will be changed to 500, record 3 and 4 won't be chagned

# ReloadCache <BOOLEAN>
# If file cache is used, when the program starts,
#     whether to reload the existing cache file (since 2.2.3)
# The size of the existing cache MUST be equal to `CacheSize'
# `true' or `false'
# This option is useless if `MemoryCache' is `true'
ReloadCache false

# OverwriteCache <BOOLEAN>
# If it failed to reload the cache file, whether to overwrite it (since 2.3)
# `true' or `false'
OverwriteCache false

##################################################
#
# Miscellaneous
#
##################################################

# DisabledType <NUM1>,<NUM2>,.....
# Refuse to query specified types of DNS (since 2.2)
# Some DNS types:
# A           1   IPv4 Address
# AAAA       28   IPv6 Address
# APL        42
# CERT       37
# CNAME       5
# DHCID      49
# DLV     32769
# DNAME      39
# DNSKEY     48
# DS         43
# HIP        55
# IPSECKEY   45
# KEY        25
# KX         36
# LOC        29
# MX         15
# NAPTR      35
# NS          2   Name Server
# NSEC       47
# NSEC3      50
# NSEC3PARAM 51
# PTR        12   Domain pointer
# RRSIG      46
# RP         17
# SIG        24
# SOA         6   start of authority record
# SPF        99
# SRV        33
# SSHFP      44
# TA      32768
# TKEY      249
# TSIG      250
# TXT        16
# ANY       255
# AXFR      252
# IXFR      251
# OPT        41
DisabledType

# DisabledDomain <DOMAIN1>,<DOMAIN2>,.....
# Refuse to query specified domains. Adjacent items should be separated by a comma, 
#     or split them to different lines of `DisabledDomain' (since 2.2.2)
# Wildcards(`?',`*') are supported
DisabledDomain

# DisabledList <PATH>
# Import disabled domains from files (since 5.0.3)
# You can use multiple `DisabledList' statements to import more than one file
# Do not surround a path with quotation marks
DisabledList

# DomainStatistic <BOOLEAN>
# Turn on domain statistics (since 2.5 b1)
# The result would be saved according to the templet file,
#     at the folder in which the executable file is (Windows), or the configuration folder (Linux),
#     named `statistic.html'
# `true' or `false'
DomainStatistic false

# DomainStatisticTempletFile <PATH>
# The path to the templet file (since 5.0.23)
# By default, the file is in the folder in which the executable file is (Windows),
#     or the configuration folder (Linux), named `StatisticTemplate.html'
DomainStatisticTempletFile

# StatisticInsertionPosition <STRING>
# Where to insert statistics in the templet file (since 5.0.23)
# By default, it is where `<!-- INSERT HERE -->' is
# StatisticInsertionPosition <!-- INSERT HERE -->

# StatisticUpdateInterval <NUM>
# Statistics updating interval(in seconds) (since 2.5 b1)
StatisticUpdateInterval 29
